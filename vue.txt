vue js
   是一种js的框架，叫做渐进式框架，可以用来定义响应式，动画，链接后台等内容，语法定义简单，数据双向绑定，节省页面代码，采用mvvm格式

语法：
   
   <div id="root">
        <h1> <!--模板-->
    	    hello {{msg}}<!--插值表达式-->
        </h1>
   </div>
   <script>
      var vm=new Vue({//创建实例
          el:"#root",//挂载点
          data:{//数据
              msg:"word"
          },
          methods:{//函数

          }
      })
   </script>
模板，挂载点，实例
  挂载点：是vue里要指定的标签
  模板：是执行js里调用的变量
  实例：用来生成对象
  数据：用来定义变量
  函数：用来执行事件
  插值表达式：用来输出js里的值
  例如：
    <div id="root"></div>
    <script>
      var vm=new Vue({//创建实例
          el:"#root",//挂载点
          template:"<a href='#'>hello {{msg}}</a>",
          data:{//数据
              msg:"word"
          },
          methods:{//函数

          }
      })
    </script>

事件与方法
   <div id="root" v-on:click="fun">
      <h1>hello {{msg}}</h1>
   </div>
   methods:{//函数
              fun: function () {
                  this.msg="fsgaa";//修改数据值
                  alert(this.msg);//查询数据值
              }
          }
  v-on 用来绑定事件，也可以简写成@click
vue 的生命周期
  每个vue实例在被创建时都要经过一系列的初始化过程--例如，需要撤职数据监听、编译模板、将实例挂载到dom并在数据变化是更新dom等。同时在这个过程也运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。
  注意：尽量不要在vue里面使用箭头函数或者闭包之类的语法，否则会改变this关键的指向。
  执行过程：当new vue创建实例时，会自动调用构造函数，然后把参数初始化，设置data里的数据，寻找是否绑定了函数，或者执行数据监听等函数内容，再来寻找挂载点，并且把数据输出到挂载点，实时更新
  事件修饰符
     stop 阻止单击事件冒泡
     prevent 不在重载页面
     capture 添加捕获模式（要添加监听函数）
     self 触发回调函数（必须操作本身，而非孩子元素）
     once 事件只能点击一次
   例如：
     <a v-on:click,stop="fun"></a>写作范式
     <a v-on:click.stop.prevent="fun"></a>执行多个
     <a v-on:click.stop.prevent></a>省略函数
  按键修饰符
     enter 回车 delete 删除或回退 esc退出 up上 down下 left左 right右
     alt shift ctrl
  例如：
   <input v-on:keyup.13="fun">指定键盘值进行调用
   <input v-on:keyup.enter="fun">指定键盘值进行调用
  事件修饰符举例：
     <input type="text" id=inp v-on:keyup.enter="fun"/>
      methods：{
         fun:function(){alert("按下回车，值："+this.values)};
      }

  监听属性 watch
  举例1：
  <div id="font">
    <h1>{{count}}</h1>
    <button v-on=click="count++"></button>
</div>
   var vm=new Vue({
                el:"#font",
                data:{
                     count=1
                }

    })
    vm.$watch(counter,function(){
//                alert("原值为："+old+",变为："+news)
                if(news==4){
                    alert("已经到头了")
                }
            })
 举例2：
    <input type="text" v-model="count"/>
    <h1>{{count}}</h1>
     watch:{
                    fun1: function () {
                        this.count++;
                    }
                }
  计算属性 computed
   computed:{
                   fullname: function () {
                       return this.first+this.last;
                   }
               }
  钩子函数
   beforecreate:举个例子：可以在这个loading事件
   created:在结束loading，还要一些出事化，实现函数自执行
   mounted:在这发起后端请求，拿回数据，配合路由钩子做一些事情
   beforeDestory:你确定删除XX吗？destoryed:单钱组件一杯删除，清空相关内容
指令
  1.v-text 用来显示文本
  2.v-html 用来显示标签
    例如：
      {{num}}可以定义变量和表达式
      <div v-text="num"></div>输出文本
      <div v-html="num"></div>可以格式化标签
  3.v-on绑定事件 v-on:click 简写@click
  4.v-bind 绑定数据 v-bind:title简写方式:title
  5.v-model双向绑定属性
  例如：
    <div id="img1">
         <input type="text" v-model:value="title"/>
         <img src="24.jpg" alt="" v-bind:title="title"/>
     </div>
     data:{
       title:"this is img"
     }
  model下的修饰符
   1.lazy在change事件中执行
   2.number 限定变量为整数类型
   3.trim过滤首尾空格
  例如：
  <input v-model.lazy="msg">
  <input v-model.number="msg" type="number">
  <input v-model.trim="msg">
  v-bind 修改样式表
  以对象形式输出样式
  <div id="div1" v-bind:class="{d1:first,d2:last}"></div>
  以数组形式输出样式
  <div id="div1" v-bind:class="[first,last]"></div>
  以布尔值判断是否输出
  <div id="div1" v-bind:class="{d1:first,d2:last}"></div>
    data:{
                   first:"d1",last:"d2"调用class名称的时候
                    first:true,//调用布尔判断是否显示的时候
                    last:false
                }
  6.v-if v-else-if v-else 判断指令
 <h1 v-if="show">看看文字的效果</h1>

  7.v-show 用来显示某个标签或属性
 <h1 v-show="show">看看文字的效果</h1>
区别：show会更改css的display属性进行显示隐藏元素，if会添加或删除标签，进行显示和隐藏
  例如：
      <div id="div1">
       <h1 v-if="show">看看文字的效果</h1>
       <input type="button" value="点击" @click="fun"/>

   </div>
      data:{
                  show:true
                },
                methods:{
                    fun:function(){
                        var v=this.show==true?false:true;
                        this.show=v;
                    }
                }
判断语句的全部用法
例如：
   <div id="text">
    <input type="text" v-model:value="name"/>
    <h1 v-if="name=='领导'">你好，领导</h1>
    <h1 v-else-if="name='客户'">欢迎光临，客户</h1>
    <h1 v-else>嗨，员工</h1>
</div>
new Vue({
                el:"#text",
                data:{
                    name:"领导"
                }
            })
   8.v-for 循环命令  两种语法 for...in for...of
   <ul id="list">
      <!--<li v-for="v of num">fdasfsa</li>-->//遍历数字
      <!--<li v-for="v in attr">{{v}}</li>-->//遍历数组
      <!--<li v-for="(v,i) in attr">{{i+":"+v}}</li>-->//i索引 v是值
      <!--<li v-for="e in emp">{{e}}</li>-->//遍历对象
      <!--<li v-for="(v,i) in emp">{{v+":"+i}}</li>-->i属性 v是值
      <!--<li v-for="v in sites">{{v.name+":"+v.age}}</li>-->//遍历对象数组
      <!--<li v-for="(value,key,index) in sites">{{index+","+key+","+value.name}}</li>-->index属性 key索引，value是值
  </ul>
       data:{
                    num:5,
                    attr:["a","b","c","d"],
                    emp:{name:"张三",age:"255",sex:"男"},
                    sites:[
                        {name:"张三",age:"255",sex:"男"},
                        {name:"张三",age:"255",sex:"男"},
                        {name:"张三",age:"255",sex:"男"},
                    ]

                }

9.v-pre用来忽略某个标签执行Vue代码(包括子元素也会忽略)
    <li v-pre>不会被vue执行</li>
10.v-cloak这个指令是用来保持在元素上直到关联实例结束时进行编译
    <div v-cloak>看看什么时候显示{{msg}}</div>
11.v-once 只渲染元素和组件一次。其所有的字节点将会被视为静态内容和并跳过
    <span v-once>会改变？{{msg}}</span>

  
    
     